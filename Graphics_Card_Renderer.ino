const unsigned char game_code[] = {
  /* 0x000 */ 0xe0, 0xe9, 0xff, 0x08, 0xe0, 0xeb, 0xff, 0x00, 0xe0, 0xd9, 0x08, 0xd5, 0xd9, 0xff, 0x01, 0xa1, 
  /* 0x010 */ 0xd9, 0xff, 0x00, 0xd2, 0xe0, 0xd4, 0xff, 0x05, 0xe0, 0xd5, 0xff, 0x05, 0xe0, 0xde, 0xff, 0x00, 
  /* 0x020 */ 0xf7, 0xfe, 0x01, 0xce, 0xf7, 0xff, 0x32, 0xf7, 0xfe, 0x01, 0x5c, 0xff, 0xfe, 0x03, 0xe8, 0xf0, 
  /* 0x030 */ 0xff, 0x24, 0xc1, 0x00, 0xa3, 0x08, 0xff, 0x00, 0x00, 0xff, 0x00, 0xe0, 0xd6, 0xff, 0x00, 0xe0, 
  /* 0x040 */ 0xd7, 0xff, 0x00, 0xe0, 0xd8, 0xff, 0x00, 0xa0, 0x08, 0xd8, 0x00, 0xfe, 0x00, 0x99, 0x16, 0x6d, 
  /* 0x050 */ 0x16, 0x6d, 0x2e, 0x16, 0x6d, 0x16, 0x6d, 0x2e, 0x16, 0x6d, 0x16, 0x6d, 0x2e, 0x16, 0x6d, 0x16, 
  /* 0x060 */ 0x6d, 0x2e, 0x16, 0x6d, 0x16, 0x6d, 0x2e, 0x16, 0x6d, 0x16, 0x6d, 0x2e, 0x16, 0x6d, 0x16, 0x6d, 
  /* 0x070 */ 0x2e, 0x16, 0x6d, 0x16, 0x6d, 0x2e, 0x16, 0x6d, 0x16, 0x6d, 0x2e, 0x16, 0x6d, 0x16, 0x6d, 0x2e, 
  /* 0x080 */ 0x16, 0x6d, 0x16, 0x6d, 0x2e, 0x16, 0x6d, 0x16, 0x6d, 0x2e, 0x16, 0x6d, 0x16, 0x6d, 0x2e, 0x16, 
  /* 0x090 */ 0x6d, 0x16, 0x6d, 0x2e, 0x16, 0x6d, 0x16, 0x6d, 0x2e, 0x16, 0x6d, 0x16, 0x6d, 0x2e, 0x16, 0x6d, 
  /* 0x0a0 */ 0x16, 0x6d, 0x2e, 0x16, 0x6d, 0x16, 0x6d, 0x2e, 0x16, 0x6d, 0x16, 0x6d, 0x2e, 0x16, 0x6d, 0x16, 
  /* 0x0b0 */ 0x6d, 0x2e, 0x16, 0x6d, 0x16, 0x6d, 0x2e, 0x16, 0x6d, 0x16, 0x6d, 0x2e, 0x16, 0x6d, 0x16, 0x6d, 
  /* 0x0c0 */ 0x2e, 0x16, 0x6d, 0x16, 0x6d, 0x2e, 0x16, 0x6d, 0x16, 0x6d, 0x2e, 0x16, 0x6d, 0x16, 0x6d, 0x2e, 
  /* 0x0d0 */ 0x16, 0x6d, 0x16, 0x6d, 0x2e, 0x16, 0x6d, 0x16, 0x6d, 0x2e, 0x16, 0x6d, 0x16, 0x6d, 0x2e, 0x16, 
  /* 0x0e0 */ 0x6d, 0x16, 0x6d, 0x2e, 0x20, 0x20, 0x0a, 0xd5, 0xd8, 0xff, 0x99, 0xd5, 0xd7, 0xff, 0x01, 0xf6, 
  /* 0x0f0 */ 0xff, 0x47, 0xd7, 0xff, 0x1e, 0xd6, 0xd8, 0xff, 0x01, 0xa0, 0x08, 0xd8, 0x00, 0xfe, 0x00, 0x0e, 
  /* 0x100 */ 0x16, 0x1c, 0x16, 0x1c, 0x0a, 0x0a, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x3a, 0x20, 0xd5, 0xd8, 
  /* 0x110 */ 0xff, 0x0e, 0xa5, 0x08, 0xd8, 0x00, 0xde, 0xe0, 0xd8, 0xff, 0x99, 0xd2, 0xd8, 0xd8, 0xd5, 0xe0, 
  /* 0x120 */ 0xd0, 0xd4, 0xd2, 0xd0, 0xd0, 0xff, 0x05, 0xd6, 0xd0, 0xff, 0x01, 0xd5, 0xd8, 0xd0, 0xa0, 0x08, 
  /* 0x130 */ 0xd8, 0x00, 0xfe, 0x00, 0x03, 0x16, 0xe3, 0x40, 0xe0, 0xd8, 0xff, 0x99, 0xd2, 0xd8, 0xd8, 0xdd, 
  /* 0x140 */ 0xe0, 0xd0, 0xdc, 0xd2, 0xd0, 0xd0, 0xff, 0x05, 0xd6, 0xd0, 0xff, 0x01, 0xd5, 0xd8, 0xd0, 0xa0, 
  /* 0x150 */ 0x08, 0xd8, 0x00, 0xfe, 0x00, 0x03, 0x16, 0xfc, 0x25, 0xc1, 0x01, 0xf8, 0xa1, 0xd9, 0xff, 0x00, 
  /* 0x160 */ 0xd2, 0xf1, 0xfe, 0x01, 0x90, 0xd2, 0xff, 0x08, 0xf1, 0xfe, 0x01, 0x81, 0xd2, 0xff, 0x02, 0xf1, 
  /* 0x170 */ 0xfe, 0x01, 0x9f, 0xd2, 0xff, 0x04, 0xf1, 0xfe, 0x01, 0xae, 0xd2, 0xff, 0x06, 0xf0, 0xfe, 0x01, 
  /* 0x180 */ 0xb9, 0xf4, 0xfe, 0x01, 0xdd, 0xd5, 0xff, 0x1e, 0xd5, 0xd5, 0xff, 0x01, 0xf0, 0xfe, 0x01, 0xb9, 
  /* 0x190 */ 0xf6, 0xfe, 0x01, 0xdd, 0xd5, 0xff, 0x00, 0xd6, 0xd5, 0xff, 0x01, 0xf0, 0xfe, 0x01, 0xb9, 0xf6, 
  /* 0x1a0 */ 0xfe, 0x01, 0xdd, 0xd4, 0xff, 0x00, 0xd6, 0xd4, 0xff, 0x01, 0xf0, 0xfe, 0x01, 0xb9, 0xf4, 0xfe, 
  /* 0x1b0 */ 0x01, 0xdd, 0xd4, 0xff, 0x1d, 0xd5, 0xd4, 0xff, 0x01, 0xf2, 0xfe, 0x01, 0xcd, 0xdc, 0xd4, 0xf2, 
  /* 0x1c0 */ 0xfe, 0x01, 0xcd, 0xdd, 0xd5, 0xd5, 0xde, 0xff, 0x01, 0xf7, 0xfe, 0x01, 0xce, 0xf8, 0xc0, 0x02, 
  /* 0x1d0 */ 0xdc, 0xff, 0x00, 0xff, 0x1e, 0xc0, 0x02, 0xdd, 0xff, 0x00, 0xff, 0x1e, 0xf8, 0xc1, 0x00, 0xa3, 
  /* 0x1e0 */ 0xd9, 0xff, 0x00, 0x00, 0xff, 0x00, 0xa0, 0x08, 0xff, 0x00, 0x01, 0xfe, 0x00, 0x3c, 0x16, 0xe0, 
  /* 0x1f0 */ 0x47, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x20, 0x70, 0x72, 0x65, 0x73, 0x73, 
  /* 0x200 */ 0x20, 0x36, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2e, 0x2e, 0x2e, 
  /* 0x210 */ 0x0a, 0x50, 0x72, 0x65, 0x73, 0x73, 0x20, 0x30, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x78, 0x69, 0x74, 
  /* 0x220 */ 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x3a, 0x2e, 0x2e, 0x2e, 0xa5, 0x08, 0xff, 0x38, 0x01, 0xde, 
  /* 0x230 */ 0xc1, 0x01, 0xa1, 0xd9, 0xff, 0x00, 0xd2, 0xf1, 0xff, 0x00, 0xd2, 0xff, 0x06, 0xff, 0xfe, 0x01, 
  /* 0x240 */ 0xf4, 0xf0, 0xfe, 0x02, 0x32, 0x00
};

void i2cGcardRenderLoop(void *arg) {
  while (true) {
    i2cGcardRender();
    coop_idle(500);
  }
}

int color_index = 0;
void i2cGcardRender() {
  if (gI2C.IsConnected() == 0)return;
  gI2C.InitIfNot();

  gI2C.Objects_Create(14, 2);
  gI2C.Objects_Move(14, 0, GC_FIELD_MARGIN, GC_FIELD_MARGIN);
  gI2C.Objects_TextAsset(14, 11);

  gI2C.Objects_Create(11, 2);

  gI2C.Objects_Move(11, 0, 160+GC_FIELD_MARGIN, GC_FIELD_MARGIN);
  gI2C.Objects_TextAsset(11, 12);

  for (int i = 0; i < 10; i++) {
    GC_DrawMenuField(i + 1);
  }
  DrawCurrentMenuGC();
  if (gc_changed) {
    gI2C.Redraw();
    gc_changed = false;
  }

  gI2C.Objects_Create(15, 1);
  gI2C.Objects_Move(15, 0, 500, 380);
  gI2C.Objects_Resize(15, 0, 5, 5);
  gI2C.Objects_Color(15, (color_index >> 1) % 2 == 0 ? 28 : 0);
  color_index++;

  gI2C.Objects_CreateIfNot(20, 2);
  if (menu != Game_MENU_ID) {
    gI2C.Objects_TextAsset(20, 0);
    gI2C.Objects_CodeAsset(20, 0);
  } else {
    gI2C.Objects_MoveIfNot(20, 0, 100, 100);
    gI2C.Objects_TextAssetIfNot(20, 20);
    gI2C.Objects_CodeAssetIfNot(20, 22);
    SetAsset(22, (uint8_t *)game_code, sizeof(game_code));
  }
}

void GC_DrawMenuField(int index) {
  gI2C.Objects_Create(index, 2);
  gI2C.Objects_Move(index, 0, GC_FIELD_MARGIN, (index * 20)+GC_FIELD_MARGIN);
  gI2C.Objects_TextAsset(index, index);
}

void StartGame() {
  menus[Game_MENU_ID].Show();
}

void GameActionCb(int index) {
  if (index % 2 == 0 && index > 0) {
    char c = index;
    String str = "";
    str += c;
    SetAsset(21, &str);
  }
  if (index == 0) {
    gI2C.Objects_TextAsset(20, 0);
    gI2C.Objects_CodeAsset(20, 0);
    Menu_Back();
  }
}
